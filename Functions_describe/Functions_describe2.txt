Описание функций лабораторных работ 2-1, 2-2 и 2-3
1) void setup()
Функция setup — это функция, которая вызывается один раз при запуске программы Arduino. Она используется для инициализации пинов, настройки последовательной связи и других нужных параметров. 
•	В лабораторной работе 2-1:
   - Инициализируется последовательный порт с коммуникацией на скорости 115200 бит/с.
   - Устанавливаются режимы пинов LED1pin и LED2pin как выводы.
   - Создается точка доступа WiFi с заданным именем и паролем.
   - Настраивается IP-адрес, шлюз и подсеть для точки доступа.
   - Устанавливается обработчик для корневого пути ("/") сервера, который вызывает функцию handle_OnConnect().
   - Устанавливаются обработчики для путей "/led1on", "/led1off", "/led2on", "/led2off" и для всех остальных неизвестных путей, которые вызывают соответствующие функции обработки.
   - Запускается сервер на порту 80.
   - Выводится сообщение о запуске сервера.
   - Запоминается время запуска сервера.
•	В лабораторной работе 2-2:
Эта функция выполняется один раз при запуске программы. В ней происходит инициализация последовательного порта, SPI-шины и пинов для светодиодов. Затем инициализируется модуль MFRC522 и выводится сообщение о сканировании карты.
•	В лабораторной работе 2-3:
- Определение констант для имени и пароля Wi-Fi сети, а также для токена Telegram-бота.
 - Подключение библиотеки `FastBot` и создание объекта `bot` с использованием токена Telegram-бота.
 - Подключение библиотек `KY038` и `KY018` для работы с датчиками звука и освещенности.
 - Определение массива `greetings` с приветственными сообщениями.
 - Вызов функции `connectWiFi()` для подключения к Wi-Fi сети.
 - Инициализация генератора случайных чисел на основе значения с аналогового пина 0.
 - Привязка функции `newMsg` к обработчику новых сообщений бота.

2) void loop()
Функция loop - это функция, которая выполняется бесконечное количество раз после завершения функции setup. Она содержит основной код программы, который будет выполняться в цикле. 
•	В лабораторной работе 2-1:
   - Обрабатываются клиентские запросы сервера.
   - Если LED1status равно true, то устанавливается высокий уровень на пине LED1pin, иначе устанавливается низкий уровень.
   - Если LED2status равно true, то устанавливается высокий уровень на пине LED2pin, иначе устанавливается низкий уровень.
•	В лабораторной работе 2-2:
- Проверяется наличие новой карты. Если новая карта не обнаружена, функция завершается.
   - Выбирается карта для дальнейшей работы.
   - Вызывается функция menu(), которая отображает меню и возвращает выбранный пункт.
   - В зависимости от выбранного пункта меню вызываются функции readingData() или writingData(). Если выбран некорректный пункт, выводится сообщение об ошибке.
   - Выполняется завершающая работа с картой, включая аутентификацию и остановку шифрования.
•	В лабораторной работе 2-3:
- Вызов метода `tick()` объекта `bot`, который проверяет наличие новых сообщений и обрабатывает их.


3. handle_OnConnect(): Эта функция вызывается при обращении к корневому пути ("/") сервера. Она обновляет состояние светодиодов и отправляет HTML-страницу с текущим состоянием светодиодов. В данном коде:
   - Устанавливается LED1status и `LED2status в низкий уровень.
   - Выводится сообщение о состоянии светодиодов.
   - Отправляется HTTP-ответ с кодом 200 (успешно) и HTML-страницей, сгенерированной функцией SendHTML().

4. handle_ledon(): Эта функция вызывается при обращении к пути "/led1on" сервера. Она устанавливает `LED1status` во включенное состояние и отправляет HTML-страницу с обновленным состоянием светодиодов. В данном коде:
   - Устанавливается LED1status во включенное состояние.
   - Выводится сообщение о состоянии светодиода.
   - Отправляется HTTP-ответ с кодом 200 и HTML-страницей, сгенерированной функцией SendHTML().

5. handle_led1off(): Эта функция вызывается при обращении к пути "/led1off" сервера. Она устанавливает `LED1status` в выключенное состояние и отправляет HTML-страницу с обновленным состоянием светодиодов. В данном коде:
   - Устанавливается LED1status в выключенное состояние.
   - Выводится сообщение о состоянии светодиода.
   - Отправляется HTTP-ответ с кодом 200 и HTML-страницей, сгенерированной функцией `SendHTML()`.

8. handle_NotFound(): Эта функция вызывается при обращении к неизвестному пути сервера. Она отправляет HTTP-ответ с кодом 404 (не найдено) и текстом "Not found". В данном коде:
   - Отправляется HTTP-ответ с кодом 404 и текстом "Not found".

9. SendHTML: Эта функция генерирует HTML-страницу с текущим состоянием светодиодов и временем работы сервера. 
В данном коде:
   - Создается строка ptr, которая содержит HTML-код страницы.
   - В строку ptr добавляются различные элементы HTML-страницы, включая состояния светодиодов и время работы сервера.
   - Возвращается сгенерированная строка ptr.

10. readingData(): Эта функция используется для чтения данных с RFID-карты. В ней происходит следующее:
   - Отображается техническая информация о карте.
   - Подготавливается ключ для аутентификации.
   - Аутентифицируется блок для операций.
   - Считываются данные из блока.
   - Отображаются считанные данные.

11. writingData(): Эта функция используется для записи данных на RFID-карту. 
12. menu(): Эта функция используется для отображения меню и получения выбранного пункта. Она возвращает выбранный пункт меню в виде целого числа.
13. newMsg(FB_msg& msg): Эта функция является обработчиком новых сообщений. Она принимает объект msg, содержащий информацию о новом сообщении. В ней происходит следующее:
   - Формируется строка tem с информацией о chatID, username и тексте сообщения.
   - Если текст сообщения равен "Hello", отправляется ответное сообщение "Привет!" и выводится информация о сообщении в Serial Monitor.
   - Если текст сообщения равен "Как дела?" или "Как ты?", формируется случайное приветственное сообщение из массива greetings, отправляется это сообщение и выводится информация о сообщении в Serial Monitor.
   - Если текст сообщения равен "/start", вызывается функция sendInlineKeyboard() для отправки сообщения с встроенной клавиатурой.
   - Если текст сообщения равен "Звук", вызывается метод getSoundLevel() объекта soundSensor для получения уровня звука, формируется ответное сообщение с уровнем звука и отправляется его, а также выводится информация о сообщении в Serial Monitor.
   - Если текст сообщения равен "Свет", вызывается метод getLightLevel() объекта lightSensor для получения уровня освещенности, формируется ответное сообщение с уровнем освещенности и отправляется его, а также выводится информация о сообщении в Serial Monitor.
   - В конце функции выводится информация о сообщении в Serial Monitor.
14. connectWiFi(): Эта функция используется для подключения к Wi-Fi сети. В ней происходит следующее:
   - Задержка на 2 секунды.
   - Инициализация Serial Monitor.
   - Установка соединения с Wi-Fi сетью, используя заданные имя и пароль.
   - В цикле ожидается установка соединения с Wi-Fi сетью. Если соединение не установлено в течение 15 секунд, происходит перезагрузка ESP.
   - При успешном соединении выводится сообщение "Connected".
15. sendInlineKeyboard(String chatID): Эта функция используется для отправки сообщения с встроенной клавиатурой. Она принимает chatID, куда отправляется сообщение. В ней происходит следующее:
   - Формируется строка keyboard с определенной в коде встроенной клавиатурой в формате JSON.
   - Формируется строка text с текстом сообщения.
   - Вызывается метод sendMessageWithInlineKeyboard() объекта bot для отправки сообщения с встроенной клавиатурой, используя заданный текст, chatID и клавиатуру.
